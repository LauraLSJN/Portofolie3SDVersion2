drop table if exists flow;
drop table if exists transport;
drop table if exists vessel;
drop table if exists habour;
pragma foreign_keys = ON;

--Habour tabel
create table habour(hid Integer primary key, name Text);
insert into habour values(1,'Jawaharlal Nehru');
insert into habour values(2,'Tanjung Pelepas');
insert into habour values(3,'Dar Es Salaam');
insert into habour values(4,'Mombasa');
insert into habour values(5,'Zanzibar');
insert into habour values(6,'Jebel Ali Dubai');
insert into habour values(7,'Salalah');

--Vessel tabel
create table vessel(vid Integer primary key, name Text, capacity integer not null ); --Not null, da kapacitet ikke må være 0
insert into vessel values(1,'Maren',12000);
insert into vessel values(2,'Misse',5000);
insert into vessel values(3,'Mette',8000);
insert into vessel values(4,'Musse',10000);
insert into vessel values(5,'Mugge',8000);
insert into vessel values(6,'Marle',10000);
insert into vessel values(7,'Minne',10000);
insert into vessel values(8,'Maryk',10000);
insert into vessel values(9,'Melle',10000);
insert into vessel values(10,'Manna',10000);
insert into vessel values(11,'Mynte',10000);
insert into vessel values(12,'Munja',10000);

--Transport Tabel
create table transport(tid Integer primary key,
                       vessel Integer  references vessel(vid),
                       fromhabour Integer  references habour(hid),
                       tohabour Integer  references habour(hid)
);
insert into transport values (1,1,1,4);
insert into transport values (2,2,1,3);
insert into transport values (3,3,2,4);
insert into transport values (4,4,2,3);
insert into transport values (5,5,2,5);
insert into transport values (6,6,2,6);
insert into transport values (7,7,2,7);
insert into transport values (8,8,3,2);
insert into transport values (9,9,3,1);
insert into transport values (10,10,3,6);
insert into transport values (11,11,4,7);
insert into transport values (12,12,4,6);


--Flow tabel
create table flow(fid Integer primary key autoincrement, --Autoincremnet, da den automatisk skal genere et fid
                  transport Integer references transport(tid),
                  containers integer
);
insert into flow(transport,containers) values (1,2000);
insert into flow(transport,containers) values (2,2000);
insert into flow(transport,containers) values (3,5000);
insert into flow(transport,containers) values (4,3000);
insert into flow(transport,containers) values (5,2000);
insert into flow(transport,containers) values (6,7000);
insert into flow(transport,containers) values (7,7000);
insert into flow(transport,containers) values (8,5000);
insert into flow(transport,containers) values (9,3000);
insert into flow(transport,containers) values (10,2000);
insert into flow(transport,containers) values (11,2000);
insert into flow(transport,containers) values (12,500);
--insert into flow(transport,containers) values (12,10000); --Tester liste som henter flows, hvor antal containers er større eller lig capacity



--Tabel som viser antalContainers fra FLow er større end den specifikke Vessels capacity (Opgave 1)
select t.tid as TransportID, f.fid as FlowID, Sum(f.containers) as FlowContainers, v.capacity as VesselCapacity
from transport t
         inner join vessel v on t.tid = v.vid
         inner join habour fromhabour on t.fromhabour = fromhabour.hid
         inner join habour tohabour on t.tohabour = tohabour.hid
         left outer join flow f on t.tid = f.transport
group by t.tid
having (FlowContainers>=v.capacity);


--Tabel tjekker at ingen vessel har flere end 1 transport om dagen
select v.name as VesselName, count(tid) as antalTransport
from transport t --Tjekker fra Transport, da det er i denne tabel der kan forekomme flere ruter pr. dag
inner join vessel v on v.vid = t.vessel
group by t.vessel --Fra transport tabel Vessel (VID) er foreign key i Transport tabel
having antalTransport > 1;